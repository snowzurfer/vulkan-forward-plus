#version 450


#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define kProjViewMatricesBindingPos 0
#define kDepthBufferBindingPos 1
#define kLightsArrayBindingPos 8
#define kLightsIdxsBindingPos 9
#define kLightsGridBindingPos 10

#define LIGHT_IDX_BUFFER_SENTINEL 0x7fffffff
#define FLT_MAX 3.402823466e+38F
#define FLT_MAX_UINT 0x7f7fffff

layout (constant_id = 0) const uint kTileSize = 16U;
layout (constant_id = 1) const uint num_lights = 2U;
const uint kMaxLightsPerTile = 50U;
const uint kRasterWidth = 1280U;
const uint kRasterHeight = 720U;
const uint kNumTilesX = kRasterWidth / kTileSize;

struct Light {
  vec4 pos_radius;
  vec4 diff_colour;
  vec4 spec_colour;
};

layout (std430, set = 0, binding = kLightsArrayBindingPos) readonly buffer LightsArray {
  Light lights[num_lights];
};

layout (std430, set = 0, binding = kLightsIdxsBindingPos) writeonly buffer LightsIdx{
  uint lights_idxs[];
};

// Group shared memory to calculate minimum and maximum z extents
shared uint z_max_lds;
shared uint z_min_lds;
shared uint lights_count_tile_lds;
shared uint lights_intersected_tile_lds[kMaxLightsPerTile];

layout(set = 0, binding = kDepthBufferBindingPos) uniform sampler2D depth_buffer;

// vulkan ndc, minDepth = 0.0, maxDepth = 1.0
const vec2 ndc_upper_left = vec2(-1.0, -1.0);
const float ndc_near_plane = 0.0;
const float ndc_far_plane = 1.0;

layout (std430, set = 0, binding = kProjViewMatricesBindingPos)
    buffer MainStaticBuffer {
  mat4 proj;
  mat4 view;
  mat4 inv_proj;
  mat4 inv_view;
};

// Use + instead of - because a RH proj matrix forced
// between 0 and 1 would keep these coordinates negative and
// proj_mat[2][2] would be negative instead of positive.
float LineariseDepth(in float depth, in mat4 proj_mat) {
  return proj_mat[3][2] / (depth + proj_mat[2][2]);
}

// From AMD DX11 sample.
// this creates the standard Hessian-normal-form plane equation from three points, 
// except it is simplified for the case where the first point is the origin
vec3 CreatePlaneEqn(vec3 b, vec3 c) {
  // normalize(cross( b-a, c-a )), except we know "a" is the origin
  // also, typically there would be a fourth term of the plane equation, 
  // -(n dot a), except we know "a" is the origin
  return normalize(cross(b,c));;
}

// point-plane distance, simplified for the case where 
// the plane passes through the origin
float GetSignedDistanceFromPlane(vec3 p, vec3 eqn) {
  // dot(eqn.xyz,p) + eqn.w, , except we know eqn.w is zero 
  // (see CreatePlaneEquation above)
  return dot(eqn,p);
}

bool TestFrustumSides(vec3 c, float r, vec3 plane0, vec3 plane1, vec3 plane2, vec3 plane3) {
  bool intersecting = GetSignedDistanceFromPlane(c, plane0) < r;
  bool intersecting1 = GetSignedDistanceFromPlane(c, plane1) < r;
  bool intersecting2 = GetSignedDistanceFromPlane(c, plane2) < r;
  bool intersecting3 = GetSignedDistanceFromPlane(c, plane3) < r;

  return (intersecting && intersecting1 && 
          intersecting2 && intersecting3);
}

// convert a point from post-projection space into view space
vec4 ConvertProjToView(vec4 p) {
  p = inv_proj * p;
  p /= p.w;
  return p;
}

// convert a depth value from post-projection space into view space
float ConvertProjDepthToView(float z) {
  z = -1.f / (z * inv_proj[2][3] + inv_proj[3][3]);
  return z;
}

float CalcMinMaxZ(uvec3 global_invocation_id) {
  ivec2 idx = ivec2(global_invocation_id.x, global_invocation_id.y);
  float depth = texelFetch(depth_buffer, idx, 0).x;
  float view_z = ConvertProjDepthToView(depth);
  uint z = floatBitsToUint(-view_z);

  if (depth != 0.f) {
    atomicMin(z_min_lds, z);
    atomicMax(z_max_lds, z);
  }

  return view_z;
}

layout (local_size_x = 16, local_size_y = 16) in;
void main() {
  // Reset values using the first thread of a group
	if (gl_LocalInvocationIndex == 0) {
		z_max_lds = 0;
		z_min_lds = FLT_MAX_UINT;
    lights_count_tile_lds = 0;
  }

  // Create planes of the frustum for the tile of the current thread group
  vec3 frustum_eqn_0, frustum_eqn_1, frustum_eqn_2, frustum_eqn_3;
  {
    // Calculate position of the corners of this group's tile in raster space
    uint rast_xt = kTileSize * gl_WorkGroupID.x;
    uint rast_yt = kTileSize * gl_WorkGroupID.y;
    uint rast_xb = kTileSize * (gl_WorkGroupID.x + 1);
    uint rast_yb = kTileSize * (gl_WorkGroupID.y + 1);
    

    // Calculate position of the corners of this group's tile in NDC space
    // Different from the AMD DX 11 sample because Vulkan's NDC space has
    // the Y axis pointing downwards
    vec4 top_left = vec4(
      float(rast_xt) / float(kRasterWidth) * 2.f - 1.f,
      float(rast_yt) / float(kRasterHeight) * 2.f - 1.f,
      1.f,
      1.f);
    vec4 bottom_left = vec4(
      top_left.x,
      float(rast_yb) / float(kRasterHeight) * 2.f - 1.f,
      1.f,
      1.f);
    vec4 bottom_right = vec4(
      float(rast_xb) / float(kRasterWidth) * 2.f - 1.f,
      bottom_left.y,
      1.f,
      1.f);
    vec4 top_right = vec4(
      bottom_right.x,
      top_left.y,
      1.f,
      1.f);

    // Convert the four corners from NDC to view space
    vec3 top_left_vs = ConvertProjToView(top_left).xyz;
    vec3 bottom_left_vs = ConvertProjToView(bottom_left).xyz;
    vec3 bottom_right_vs = ConvertProjToView(bottom_right).xyz;
    vec3 top_right_vs = ConvertProjToView(top_right).xyz;

    // Create plane equations for the four sides of the frustum,
    // with the positive half space outside the frustum. Also
    // change the handedness from left to right compared to the AMD
    // DX 11 sample, since we chose the view space to be right handed
    frustum_eqn_0 = CreatePlaneEqn(top_right_vs, top_left_vs);
    frustum_eqn_1 = CreatePlaneEqn(top_left_vs, bottom_left_vs);
    frustum_eqn_2 = CreatePlaneEqn(bottom_left_vs, bottom_right_vs);
    frustum_eqn_3 = CreatePlaneEqn(bottom_right_vs, top_right_vs);
  }

  groupMemoryBarrier();

  // Calculate the min and max depth for the current tile
  float min_z = FLT_MAX;
  float max_z = 0.f; 

  float view_z = CalcMinMaxZ(gl_GlobalInvocationID);

  groupMemoryBarrier();
    
  
  // Reinterpret the atomically added values to floats
  min_z = -(uintBitsToFloat(z_min_lds));
  max_z = -(uintBitsToFloat(z_max_lds));


  // Loop over the point lights and run a sphere - frustum intersection test
  const uint kThreadsPerTile = kTileSize * kTileSize;
  for (uint i = gl_LocalInvocationIndex; i < num_lights; i += kThreadsPerTile) {
    vec3 light_centre = lights[i].pos_radius.xyz;
    float light_radius = lights[i].pos_radius.w;
    if (TestFrustumSides(light_centre, light_radius,
          frustum_eqn_0, frustum_eqn_1, frustum_eqn_2, frustum_eqn_3)) {
      if (max_z - light_centre.z < light_radius && 
          light_centre.z - min_z < light_radius) {
        uint dst_idx = atomicAdd(lights_count_tile_lds, 1);
        lights_intersected_tile_lds[dst_idx] = i;
      }
    }
  }

  groupMemoryBarrier();

  // Create the grid and index list
  uint tile_id_1d = gl_WorkGroupID.x + gl_WorkGroupID.y * kNumTilesX;
  // Calculate the starting offset within the per-tile lights list for the lights
  // of this tile
  uint start_offset = tile_id_1d * kMaxLightsPerTile;
  
  // Mark the start of the list using the thread number 0
  if (gl_LocalInvocationIndex == 0) {
    lights_idxs[start_offset] = lights_count_tile_lds;
  }
  
  for (uint i = gl_LocalInvocationIndex; i < lights_count_tile_lds; i += kThreadsPerTile) {
    lights_idxs[start_offset + i + 1] = lights_intersected_tile_lds[i];
  }
  
  
  if (gl_GlobalInvocationID.x == 5 && gl_GlobalInvocationID.y == 1) {
        lights_idxs[8] = uint(-min_z * 1000.f);
        lights_idxs[9] = uint(-max_z * 1000.f);
        lights_idxs[10] = uint(view_z * 1000.f);
        lights_idxs[11] = lights_count_tile_lds;
        lights_idxs[12] = gl_LocalInvocationIndex;
        
      }
  if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0) {
        lights_idxs[3] = uint(-min_z * 1000.f);
        lights_idxs[4] = uint(-max_z * 1000.f);
        lights_idxs[5] = uint(view_z * 1000.f);
        lights_idxs[6] = lights_count_tile_lds;
        lights_idxs[7] = gl_LocalInvocationIndex;
        
      }
}
